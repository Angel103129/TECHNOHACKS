import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TicTacToeGUI extends JFrame implements ActionListener {

    private JButton[][] buttons;
    private boolean playerX;
    private JLabel statusLabel;
    private JButton newGameButton; // New game button

    public TicTacToeGUI() {
        setTitle("Tic Tac Toe");
        setSize(300, 350);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        getContentPane().setBackground(Color.BLACK); // Set background color to black

        JPanel gamePanel = new JPanel();
        gamePanel.setLayout(new GridLayout(3, 3));
        buttons = new JButton[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton("");
                buttons[i][j].setFont(new Font("Arial", Font.PLAIN, 40));
                buttons[i][j].addActionListener(this);
                buttons[i][j].setBackground(Color.BLACK); // Set button background color to black
                buttons[i][j].setForeground(Color.WHITE); // Set button text color to white
                gamePanel.add(buttons[i][j]);
            }
        }

        add(gamePanel, BorderLayout.CENTER);

        statusLabel = new JLabel("Player X's turn");
        statusLabel.setHorizontalAlignment(SwingConstants.CENTER);
        statusLabel.setForeground(Color.WHITE); // Set status label text color to white
        add(statusLabel, BorderLayout.NORTH);

        newGameButton = new JButton("New Game");
        newGameButton.addActionListener(this);
        newGameButton.setBackground(Color.BLACK); // Set button background color to black
        newGameButton.setForeground(Color.WHITE); // Set button text color to white
        add(newGameButton, BorderLayout.SOUTH);

        playerX = true;
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == newGameButton) { // If "New Game" button is clicked
            resetGame();
        } else {
            JButton clickedButton = (JButton) e.getSource();
            if (clickedButton.getText().equals("")) {
                if (playerX) {
                    clickedButton.setText("X");
                    clickedButton.setForeground(Color.GREEN); // Set 'X' to GREEN 
                    statusLabel.setText("Player O's turn");
                } else {
                    clickedButton.setText("O");
                    clickedButton.setForeground(Color.RED); // Set 'O' to RED
                    statusLabel.setText("Player X's turn");
                }
                playerX = !playerX;
                if (checkForWinner()) {
                    if (playerX)
                        statusLabel.setText("Player O wins!");
                    else
                        statusLabel.setText("Player X wins!");
                    disableAllButtons();
                } else if (isBoardFull()) {
                    statusLabel.setText("It's a draw!");
                    newGameButton.setVisible(true); //
                }
            }
        }
    }

    private boolean checkForWinner() {
        String[][] board = new String[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = buttons[i][j].getText();
            }
        }
        // Check rows
        for (int i = 0; i < 3; i++) {
            if (board[i][0].equals(board[i][1]) && board[i][1].equals(board[i][2]) && !board[i][0].equals("")) {
                return true;
            }
        }
        // Check columns
        for (int i = 0; i < 3; i++) {
            if (board[0][i].equals(board[1][i]) && board[1][i].equals(board[2][i]) && !board[0][i].equals("")) {
                return true;
            }
        }
        // Check diagonals
        if (board[0][0].equals(board[1][1]) && board[1][1].equals(board[2][2]) && !board[0][0].equals("")) {
            return true;
        }
        if (board[0][2].equals(board[1][1]) && board[1][1].equals(board[2][0]) && !board[0][2].equals("")) {
            return true;
        }
        return false;
    }

    private boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (buttons[i][j].getText().equals("")) {
                    return false;
                }
            }
        }
        return true;
    }

    private void disableAllButtons() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setEnabled(false);
            }
        }
    }

    private void resetGame() {
        // Clear all buttons
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText("");
                buttons[i][j].setEnabled(true);
            }
        }
        // Reset status label
        statusLabel.setText("Player X's turn");
        // Reset player
        playerX = true;
        newGameButton.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            TicTacToeGUI game = new TicTacToeGUI();
            game.setVisible(true);
        });
    }
}
